import shutil
import os

# Define the project structure and files with their content
project_structure = {
    "BeSafeWithMe-backend/models/User.js": '''\
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  role: { type: String, enum: ['Admin0', 'AdminActif', 'Admin', 'Employe'], required: true },
  department: { type: String, required: true },
  phone: { type: String },
  email: { type: String, unique: true },
  locationHistory: [{ date: Date, location: { latitude: Number, longitude: Number } }],
});

module.exports = mongoose.model('User', userSchema);
''',

    "BeSafeWithMe-backend/routes/auth.js": '''\
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const router = express.Router();

router.post('/register', async (req, res) => {
  const { username, password, role, department, phone, email } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);

  const user = new User({
    username,
    password: hashedPassword,
    role,
    department,
    phone,
    email,
  });
  
  await user.save();
  res.status(201).json({ message: 'User created' });
});

router.post('/login', async (req, res) => {
  const { username, password } = req.body;
  const user = await User.findOne({ username });

  if (user && await bcrypt.compare(password, user.password)) {
    const token = jwt.sign({ id: user._id, role: user.role }, 'yourSecretKey');
    res.json({ token });
  } else {
    res.status(400).json({ error: 'Invalid credentials' });
  }
});

module.exports = router;
''',

    "BeSafeWithMe-backend/routes/emergency.js": '''\
const express = require('express');
const router = express.Router();
const User = require('../models/User');

// Function to simulate sending a notification
const sendNotification = (department, message) => {
  console.log(`Notification sent to department ${department}: ${message}`);
};

router.post('/panic', async (req, res) => {
  const { userId } = req.body;
  const user = await User.findById(userId);

  if (user) {
    sendNotification(user.department, `${user.username} has activated the panic button!`);
    res.json({ message: 'Alert sent!' });
  } else {
    res.status(404).json({ error: 'User not found' });
  }
});

module.exports = router;
''',

    "BeSafeWithMe-backend/routes/location.js": '''\
const express = require('express');
const router = express.Router();
const User = require('../models/User');

router.post('/location', async (req, res) => {
  const { userId, location } = req.body;
  const user = await User.findById(userId);

  if (user) {
    user.locationHistory.push({ date: new Date(), location });
    await user.save();
    res.json({ message: 'Location saved' });
  } else {
    res.status(404).json({ error: 'User not found' });
  }
});

router.get('/location/:userId', async (req, res) => {
  const { userId } = req.params;
  const user = await User.findById(userId);

  if (user) {
    res.json(user.locationHistory);
  } else {
    res.status(404).json({ error: 'User not found' });
  }
});

module.exports = router;
''',

    "BeSafeWithMe-backend/server.js": '''\
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const authRoutes = require('./routes/auth');
const emergencyRoutes = require('./routes/emergency');
const locationRoutes = require('./routes/location');

const app = express();
app.use(cors());
app.use(express.json());

// MongoDB Connection
mongoose.connect('mongodb://localhost:27017/BeSafeWithMe', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log('MongoDB connected'))
  .catch(err => console.log(err));

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/emergency', emergencyRoutes);
app.use('/api/location', locationRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
'''
}

# Create project structure and write files
project_dir = "/mnt/data/BeSafeWithMe-backend"
for path, content in project_structure.items():
    full_path = os.path.join("/mnt/data", path)
    os.makedirs(os.path.dirname(full_path), exist_ok=True)
    with open(full_path, 'w') as f:
        f.write(content)
